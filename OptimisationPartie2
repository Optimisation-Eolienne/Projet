import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import plotly.graph_objects as go
from cylp.cy import CyClpSimplex
from cylp.py.modeling.CyLPModel import CyLPModel,CyLPArray


#| Paramètres

N_pays = 15
N_sites = 642
N_heures_par_annee = 24*365
N_annees = 7/365
N_heures = int(np.ceil(N_heures_par_annee*N_annees))

T = 3
m = int(np.floor(N_heures/T))
t = np.linspace(0,N_heures,m)/N_heures_par_annee
eta_turbinage = 0.75
cout_instal_onshore  = 168903
cout_instal_offshore = 300336
cout_amorti_gaz = 94956
cout_fonct_gaz  = 65

stockage_hydro = CyLPArray([0.3*1e6 , 3.2*1e6 , 0.01*1e6 , 0 , 18.4*1e6 , 9.8*1e6 , 0.24*1e6 , 7.9*1e6 , 0.005*1e6 , 84.147*1e6 , 0 , 2.6*1e6 , 1.2*1e6 , 33.756*1e6 , 8.4*1e6])
p_turbinage = np.array([8587 , 12009 , 1417 , 9 , 18372 , 25132 , 527 , 21117 , 1140 , 28941 , 37 , 5052 , 4269 , 16637 , 15101])
p_pompage = np.array([5223 , 3580 , 1307 , 0 , 5347 , 4303 , 292 , 7544 , 1100 , 1396 , 0 , 1029 , 2744 , 45 , 1636 ])
liste_pays = ['Allemagne','Autriche','Belgique','Danemark','Espagne','France','Irlande','Italie','Luxembourg',\
             'Norvège','Pays-Bas','Portugal','Royaume-Uni','Suède','Suisse']

#| Chargement des données

consommations = np.genfromtxt('Consommations.csv', delimiter=',')[:,:N_heures]
sites = pd.read_csv("Sites.csv",index_col="index site").sort_index()
rendements_offshore = np.genfromtxt('Rendements_offshore.csv', delimiter=',')[:,:N_heures]
rendements_onshore = np.genfromtxt('Rendements_onshore.csv', delimiter=',')[:,:N_heures]
apports_hydro = np.genfromtxt('Apports-hydro.csv', delimiter=',')[:,:N_heures]


#| Matrice et vecteurs principaux utilisés dans les problèmes

P_max = CyLPArray(sites["capacites"])

is_offshore = pd.Series(0,index=range(N_sites))
is_offshore[sites["capacite offshore"]=="Oui"] = 1
is_offshore = CyLPArray(is_offshore)

apport_hydro_total = np.zeros((N_pays,m))
for j in range(N_pays):
    total = 0
    for i in range(m):
        total += np.sum(apports_hydro[j,i*T:(i+1)*T]) 
        apport_hydro_total[j,i] = total

consommation_par_periode = np.zeros((N_pays,m))
for i in range(m):
    for j in range(N_pays):
        consommation_par_periode[j,i] = np.sum(consommations[j,i*T:(i+1)*T])

A = np.matrix(np.zeros((m,N_sites)))
for i in range(m):
    for j in range(N_sites):
        if is_offshore[j]==1:
            A[i,j] = np.sum(rendements_offshore[j,i*T:(i+1)*T])
        else:
            A[i,j] = np.sum(rendements_onshore[j,i*T:(i+1)*T])

c = (cout_instal_offshore*is_offshore+cout_instal_onshore*(1-is_offshore))*N_annees

L = np.matrix(np.tril(np.ones((m,m))))


#| Données du modèles agrégé

S_max = np.sum(stockage_hydro)
h1 = np.sum(p_pompage)*T
h2 = 1/eta_turbinage*np.sum(p_turbinage)*T
R = CyLPArray(np.zeros(m))
E = CyLPArray(np.zeros(m))
for i in range(m):
    R[i] = np.sum(apport_hydro_total[:,i])
    E[i] = np.sum(consommation_par_periode[:,i])
    

#| Modèle d'optimisation

def model_1(theta=0.5):        
    
    S_0 = theta*S_max
    
    simplex = CyClpSimplex()
    
    #Variables
    P = simplex.addVariable('P',N_sites)
    q1 = simplex.addVariable('q1',m) # Eoliennes->Barrage
    q2 = simplex.addVariable('q2',m) # Barrage->Production
    q3 = simplex.addVariable('q3',m) # Eoliennes->Production
    
    #Contraintes
    simplex.addConstraint(0 <= P <= P_max,"Bornes sur les puissances installées")
    simplex.addConstraint(0 <= q1 <= h1,"Bornes sur le transfert Eoliennes->Barrage")
    simplex.addConstraint(0 <= q2 <= h2,"Bornes sur le transfert Barrage->Production")
    simplex.addConstraint(0 <= q3,"Bornes sur le transfert Eoliennes->Production")
    simplex.addConstraint(q3 + eta_turbinage*q2 >= E,"Demande d'énergie satisfaite")
    simplex.addConstraint(q1 + q3 - A*P == 0,"Conservation de l'énergie produite par les éoliennes")
    simplex.addConstraint(- S_0 - R <= L*q1 - L*q2,"Capacité du barrage positive")
    simplex.addConstraint(L*q1 - L*q2 <= S_max - S_0 - R,"Capacité maximale du barrage")
    simplex.addConstraint(q2.sum() - q1.sum() == R[-1],"Stockage initial et final identique")
    
    #Objectif
    simplex.objective = c*P
    
    simplex.dual()
    print(simplex.getStatusString())
    
    return simplex.primalVariableSolution['P'],simplex.objectiveValue,simplex,theta

def model_2(theta=0.5):
        
    S_0 = theta*S_max
    d = 1/2*c*P_max
    B = 1/2*P_max*A
    
    model = CyLPModel()
    
    #Variables
    x = model.addVariable('x',N_sites,isInt=True) 
    q1 = model.addVariable('q1',m) # Eoliennes->Barrage
    q2 = model.addVariable('q2',m) # Barrage->Production
    q3 = model.addVariable('q3',m) # Eoliennes->Production
      
    #Contraintes
    model.addConstraint(0 <= x <= 2,"Bornes sur la proportion de puissance installée")
    model.addConstraint(0 <= q1 <= h1,"Bornes sur le transfert Eolienne->Barrage")
    model.addConstraint(0 <= q2 <= h2,"Bornes sur le transfert Barrage->Production")
    model.addConstraint(0 <= q3,"Bornes sur le transfert Eoliennes->Production")
    model.addConstraint(q1 + q3 - B*x == 0,"Conservation de l'énergie produite par les éoliennes")
    model.addConstraint(q3 + eta_turbinage*q2 >= E,"Demande d'énergie satisfaite")
    model.addConstraint(- S_0 - R <= L*q1 - L*q2,"Capacité minimale du barrage")
    model.addConstraint(L*q1 - L*q2 <= S_max - S_0 - R,"Capacité maximale du barrage")
    model.addConstraint(q2.sum() - q1.sum() == R[-1],"Stockage initial et final identique")
    
    #Objectif
    model.objective = d*x
    
    simplex = CyClpSimplex(model)
    cbcModel = simplex.getCbcModel()
    cbcModel.branchAndBound()
    
    return cbcModel.primalVariableSolution['x'],cbcModel.objectiveValue,cbcModel,theta

def model_3(index_pays,theta=0.5):  
    
    #Adaptation des données
    pays = liste_pays[index_pays]
    P_max2 = CyLPArray(pd.Series(P_max).loc[sites["pays"]==pays])
    c2 = CyLPArray(pd.Series(c).loc[sites["pays"]==pays])
    A2 = np.matrix(pd.DataFrame(A).loc[:,sites["pays"]==pays])
    N_sites2 = len(P_max2)
    
    S_max = stockage_hydro[index_pays]
    h1 = p_pompage[index_pays]*T
    h2 = 1/eta_turbinage*p_turbinage[index_pays]*T
    R = CyLPArray(apport_hydro_total[index_pays,:])
    E = CyLPArray(consommation_par_periode[index_pays,:])
    
    S_0 = theta*S_max
    
    simplex = CyClpSimplex()
    
    #Variables
    P = simplex.addVariable('P',N_sites2)
    q1 = simplex.addVariable('q1',m) # Eoliennes->Barrage
    q2 = simplex.addVariable('q2',m) # Barrage->Production
    q3 = simplex.addVariable('q3',m) # Eoliennes->Production
    
    #Contraintes
    simplex.addConstraint(0 <= P <= P_max2,"Bornes sur les puissances installées")
    simplex.addConstraint(0 <= q1 <= h1,"Bornes sur le transfert Eolienne->Barrage")
    simplex.addConstraint(0 <= q2 <= h2,"Bornes sur le transfert Barrage->Production")
    simplex.addConstraint(0 <= q3,"Bornes sur le transfert Eoliennes->Production")
    simplex.addConstraint(q3 + eta_turbinage*q2 >= E,"Demande d'énergie satisfaite")
    simplex.addConstraint(q1 + q3 - A2*P == 0,"Conservation de l'énergie produite par les éoliennes")
    simplex.addConstraint(- S_0 - R <= L*q1 - L*q2,"Capacité du barrage positive")
    simplex.addConstraint(L*q1 - L*q2 <= S_max - S_0 - R,"Capacité maximale du barrage")
    simplex.addConstraint(q2.sum() - q1.sum() == R[-1],"Stockage initial et final identique")
    
    #Objectif
    simplex.objective = c2*P
    
    simplex.primal()
    print(simplex.getStatusString())
    
    return simplex.primalVariableSolution['P'],simplex.objectiveValue,simplex,theta,index_pays

def model_4(index_pays,theta=0.5):        
    
    #Adaptation des données
    pays = liste_pays[index_pays]  
    P_max2 = CyLPArray(pd.Series(P_max).loc[sites["pays"]==pays])
    c2 = CyLPArray(pd.Series(c).loc[sites["pays"]==pays])
    A2 = np.matrix(pd.DataFrame(A).loc[:,sites["pays"]==pays])
    N_sites2 = len(P_max2)
    
    S_max = stockage_hydro[index_pays]
    h1 = p_pompage[index_pays]*T
    h2 = 1/eta_turbinage*p_turbinage[index_pays]*T
    R = CyLPArray(np.transpose(apport_hydro_total[index_pays,:]))
    E = CyLPArray(consommation_par_periode[index_pays,:])
    
    S_0 = theta*S_max
    
    d1 = cout_amorti_gaz*N_annees
    d2 = cout_fonct_gaz*T
    
    simplex = CyClpSimplex()
    
    #Variables
    P = simplex.addVariable('P',N_sites2)
    G = simplex.addVariable('g',1)
    u = simplex.addVariable('u',m)
    q1 = simplex.addVariable('q1',m) # Eoliennes->Barrage
    q2 = simplex.addVariable('q2',m) # Barrage->Production
    q3 = simplex.addVariable('q3',m) # Eoliennes->Production
    q4 = simplex.addVariable('q4',m) # Centrale->Barrage
    q5 = simplex.addVariable('q5',m) # Centrale->Production
    
    #Contraintes
    simplex.addConstraint(0 <= P <= P_max2,"Bornes sur les puissances installées")
    simplex.addConstraint(0 <= q1 <= h1,"Bornes sur le transfert Eolienne->Barrage")
    simplex.addConstraint(0 <= q2 <= h2,"Bornes sur le transfert Barrage->Production")
    simplex.addConstraint(0 <= q3,"Bornes sur le transfert Eoliennes->Production")
    simplex.addConstraint(0 <= q4,"Bornes sur le transfert Centrale->Barrage")
    simplex.addConstraint(0 <= q5,"Bornes sur le transfert Centrale->Production")
    
    for i in range(m):
        simplex.addConstraint(u[i] - g <= 0)
    simplex.addConstraint(0 <= u)
    
    
    simplex.addConstraint(-S_0 - R <= L*q1 - L*q2,"Capacité du barrage positive")
    simplex.addConstraint(L*q1 - L*q2 <= S_max - S_0 - R,"Capacité maximale du barrage")
    simplex.addConstraint(q1 + q3 - A2*P == 0,"Conservation de l'énergie produite par les éoliennes")
    simplex.addConstraint(q4 + q5 - u == 0)
    simplex.addConstraint(E <= eta_turbinage*q2 + q3 + q5,"Demande d'énergie satisfaite")
    simplex.addConstraint(q2.sum() - q1.sum() - q4.sum() == R[-1],"Stockage initial et final identique")
    
    #Objectif
    simplex.objective = c2*P + d1*g + d2*u.sum()
    
    simplex.primal()
    print(simplex.getStatusString())
    
    return simplex.primalVariableSolution['u'],simplex.objectiveValue,simplex,theta,index_pays

def plotModel_Consommation(result,model):
    s = result[2]
    if model==1 or model==2:
        E_prod = eta_turbinage*s.primalVariableSolution['q2']+s.primalVariableSolution['q3']
        E_cons = E
    if model==3:
        E_prod = eta_turbinage*s.primalVariableSolution['q2']+s.primalVariableSolution['q3']
        E_cons = consommation_par_periode[result[4],:] 
    if model==4:
        E_prod = eta_turbinage*s.primalVariableSolution['q2']+s.primalVariableSolution['q3']+s.primalVariableSolution['q5']
        E_cons = consommation_par_periode[result[4],:] 
    
    E_prod_tot = np.sum(E_prod)
    E_cons_tot = np.sum(E_cons)
    
    fig = plt.figure(figsize=(16,3))
    g = fig.add_subplot(1,1,1)
    g.set_title("Graphique de l'énergie produite et consommée en fonction du temps")
    g.set_ylabel("Energie [TWh]")
    g.set_xlabel("Temps [année]")
    g.plot(t,E_prod*10**(-6),label="Energie produite")
    g.plot(t,E_cons*10**(-6),label="Energie consommée")
    
    plt.legend()
    plt.show()
    
    print("Energie totale produite : {:.0f} [MWh]".format(E_prod_tot))
    print("Proportion de l'énergie produite qui n'a pas été consommée : {:.2f}%".format(100*(E_prod_tot-E_cons_tot)/E_prod_tot))
    
    
def plotModel_Energie(result,model):
    pass
    
def plotModel_Barrage(result,model):
    s = result[2]
    E_eolienne_stock = np.array(L)@s.primalVariableSolution['q1']
    if model==1 or model==2:
        apport_hydro_stock = R
        S =  np.array(L)@(s.primalVariableSolution['q1']-s.primalVariableSolution['q2']) + apport_hydro_stock
        S += result[3]*S_max
    if model==3 or model==4:
        apport_hydro_stock = apport_hydro_total[result[4],:]
        S = np.array(L)@(s.primalVariableSolution['q1']-s.primalVariableSolution['q2']) + apport_hydro_stock
        if model==4:
            S += np.array(L)@s.primalVariableSolution['q4']
        S += result[3]*stockage_hydro[result[4]]
    
    fig = plt.figure(figsize=(16,6))
    plt.subplots_adjust(hspace=0.5)
    g1 = fig.add_subplot(2,1,1)
    g2 = fig.add_subplot(2,1,2)
    
    g1.set_title("Graphique représentant l'énergie stockée dans le barrage en fonction du temps")
    g1.set_ylabel("Energie [TWh]")
    g1.set_xlabel("Temps [année]")
    g1.plot(t,S*10**(-6))
    
    g2.set_title("Graphique de l'évolution du stockage cumulé des différentes énergies en fonction du temps")
    g2.set_ylabel("Energie [TWh]")
    g2.set_xlabel("Temps [année]")
    g2.plot(t,E_eolienne_stock*10**(-6),label="Energie éolienne stockée")
    g2.plot(t,10**(-6)*apport_hydro_stock,label="Energie stockée provennant des cours d'eau")
    
    plt.legend()
    plt.show()
    
def plotModel_StockageInitial(theta_min,theta_max,theta_step):
    theta= np.arange(theta_min,theta_max+theta_step,theta_step)
    objectiveValue = np.zeros(len(theta))
    for i in range(len(theta)):
        objectiveValue[i] = model_1(theta[i])[1]
    
    fig = plt.figure(figsize=(10,6))
    g = fig.add_subplot(1,1,1)
    g.set_title("Variation du coût total de production en fonction du stockage initial")
    g.set_ylabel("Coût de production (en €)")
    g.set_xlabel("theta [/]")
    g.scatter(theta,objectiveValue)
    
    plt.show()
    
def plotModel_Time(data,model):
    
    fig = plt.figure(figsize=(10,5))
    fig.suptitle("Temps d'exécution en fonction du nombre d'années considérées")
    fig.subplots_adjust(wspace=0.4,top=0.84)
    
    if model!=2:
        g1 = fig.add_subplot(1,2,1)
        g2 = fig.add_subplot(1,2,2)
        
        g1.set_title("Algorithme du simplexe primal")
        g1.set_xlabel("Période de résolution du modèle [année]")
        g1.set_ylabel("Temps d'exécution [s]")
        g1.set_ylim(top=500)
        g1.scatter(data['input_size'],data['time1'])
        
        g2.set_title("Algorithme du simplexe dual")
        g2.set_xlabel("Période de résolution du modèle [année]")
        g2.set_ylabel("Temps d'exécution [s]")
        g2.set_ylim(top=500)
        g2.scatter(data['input_size'],data['time2'])
    
    if model==2:
        g1 = fig.add_subplot(1,1,1)
        
        g1 = fig.set_title("Algorithme du branch and bound")
        g1.set_xlabel("Période de résolution du modèle [année]")
        g1.set_ylabel("Temps d'exécution [s]")
        g1.scatter(data['input_size'],data['time1'])
        
    plt.show()

def main():
    result = model_4(1)
    print(result[1])
    plotModel_Consommation(result,4)
    plotModel_Barrage(result,4)
    plotModel_StockageInitial(0,1,0.1)
    
main()
