## imports classiques
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import plotly.graph_objects as go
from cylp.cy import CyClpSimplex
from cylp.py.modeling.CyLPModel import CyLPArray


#| Paramètres

N_pays = 15
N_sites = 642
N_heures_par_annee = 24*365
N_annees = 7/365
N_heures = int(np.ceil(N_heures_par_annee*N_annees))

T = 3
m = int(np.floor(N_heures/T))
eta_turbinage = 0.75
cout_instal_onshore  = 168903
cout_instal_offshore = 300336

stockage_hydro = CyLPArray([0.3*1e6 , 3.2*1e6 , 0.01*1e6 , 0 , 18.4*1e6 , 9.8*1e6 , 0.24*1e6 , 7.9*1e6 , 0.005*1e6 , 84.147*1e6 , 0 , 2.6*1e6 , 1.2*1e6 , 33.756*1e6 , 8.4*1e6])
p_turbinage = np.array([8587 , 12009 , 1417 , 9 , 18372 , 25132 , 527 , 21117 , 1140 , 28941 , 37 , 5052 , 4269 , 16637 , 15101])
p_pompage = np.array([5223 , 3580 , 1307 , 0 , 5347 , 4303 , 292 , 7544 , 1100 , 1396 , 0 , 1029 , 2744 , 45 , 1636 ])


#| Chargement des données

consommations = np.genfromtxt('Consommations.csv', delimiter=',')[:,:N_heures]
sites = pd.read_csv("Sites.csv",index_col="index site").sort_index()
rendements_offshore = np.genfromtxt('Rendements_offshore.csv', delimiter=',')[:,:N_heures]
rendements_onshore = np.genfromtxt('Rendements_onshore.csv', delimiter=',')[:,:N_heures]
apports_hydro = np.genfromtxt('Apports-hydro.csv', delimiter=',')[:,:N_heures]


#| Matrice et vecteurs principaux utilisés dans les problèmes

P_max = CyLPArray(sites["capacites"])

is_offshore = pd.Series(0,index=range(N_sites))
is_offshore[sites["capacite offshore"]=="Oui"] = 1
is_offshore = CyLPArray(is_offshore)

A = np.matrix(np.zeros((m,N_sites)))
for i in range(m):
    for j in range(N_sites):
        if is_offshore[j]==1:
            A[i,j] = np.sum(rendements_offshore[j,i*T:(i+1)*T])
        else:
            A[i,j] = np.sum(rendements_onshore[j,i*T:(i+1)*T])

c = (cout_instal_offshore*is_offshore+cout_instal_onshore*(1-is_offshore))*N_annees

r = np.zeros((N_pays,m))
for i in range(m):
    for j in range(N_pays):
        r[j,i] = np.sum(apports_hydro[j,i*T:(i+1)*T])

C = np.zeros((N_pays,m))
for i in range(m):
    for j in range(N_pays):
        C[j,i] = np.sum(consommations[j,i*T:(i+1)*T])

U = np.matrix(np.tril(np.ones((m,m))))
D = np.matrix(np.tril(np.ones((m,m)),k=-1))

#| Modèle d'optimisation

def model_1(index_pays=-1):
    if index_pays==-1:
        S_max = np.sum(stockage_hydro)
        h1 = np.sum(p_pompage)*T
        h2 = np.sum(p_turbinage)*T
        q4 = np.zeros(m)
        E = CyLPArray(np.zeros(m))
        for i in range(m):
            q4[i] = np.sum(r[:,i])
            E[i] = np.sum(C[:,i])
    else:
        S_max = stockage_hydro[index_pays]
        h1 = p_pompage[index_pays]*T
        h2 = p_turbinage[index_pays]*T
        q4 = CyLPArray(np.transpose(r[index_pays,:]))
        E = CyLPArray(np.transpose(C[index_pays,:]))
    
    S_0 = 0
    
    simplex = CyClpSimplex()
    
    #Variables
    P = simplex.addVariable('P',N_sites)
    q1 = simplex.addVariable('q1',m)
    q2 = simplex.addVariable('q2',m)
    q3 = simplex.addVariable('q3',m)
    
    v = CyLPArray(np.ones(m))
    Q4 = CyLPArray(U@q4)
    
    #Contraintes
    simplex.addConstraint(0 <= P,"Positivité")
    simplex.addConstraint(P <= P_max,"Bornes supérieures")
    simplex.addConstraint(0 <= q1)
    simplex.addConstraint(q1 <= h1,"c1")
    simplex.addConstraint(0 <= q2)
    simplex.addConstraint(eta_turbinage*q2 <= h2,"c2")
    simplex.addConstraint(-S_0*v-Q4 <= U*(q1-q2))
    simplex.addConstraint(U*(q1-q2) <= (S_max-S_0)*v-Q4,"c4")
    simplex.addConstraint(q1+q3-A*P == 0,"cf2")
    simplex.addConstraint(q3+eta_turbinage*q2 >= E,"cf")
    simplex.addConstraint(q1.sum()-q2.sum()==-Q4[-1])
    
    #Objectif
    simplex.objective = c*P
    
    simplex.primal()
    
    print(simplex.getStatusString())
    
    return simplex.primalVariableSolution['q2'],simplex.objectiveValue,simplex

def model_2(index_pays=-1):
    if index_pays==-1:
        S_max = np.sum(stockage_hydro)
        h1 = np.sum(p_pompage)*T
        h2 = np.sum(p_turbinage)*T
        q4 = np.zeros(m)
        E = CyLPArray(np.zeros(m))
        for i in range(m):
            q4[i] = np.sum(r[:,i])
            E[i] = np.sum(C[:,i])
    else:
        S_max = stockage_hydro[index_pays]
        h1 = p_pompage[index_pays]*T
        h2 = p_turbinage[index_pays]*T
        q4 = CyLPArray(np.transpose(r[index_pays,:]))
        E = CyLPArray(np.transpose(C[index_pays,:]))
    
    d = CyLPArray(np.zeros(N_sites))
    for i in range(N_sites):
        d[i] = c[i]*P_max[i]
    
    #Variables
    x = simplex.addVariable('x',N_sites,isInt=True) 
    q1 = simplex.addVariable('q1',m)
    q2 = simplex.addVariable('q2',m)
    q3 = simplex.addVariable('q3',m) 
    
    simplex = CyClpSimplex()
    
    #Contraintes
    simplex.addConstraint(0 <= x,"discontinuité 1")
    simplex.addConstraint(x <= 2,"discontinuité 2")
    simplex.addConstraint(0 <= q1)
    simplex.addConstraint(q1 <= h1,"c1")
    simplex.addConstraint(0 <= q2)
    simplex.addConstraint(eta_turbinage*q2 <= h2,"c2")
    
    #Objectif
    simplex.objective = d*x
    
    simplex.primal()
    
    print(simplex.getStatusString())
    
    return simplex.primalVariableSolution['x'],simplex.objectiveValue,simplex

def main():
    res = model_1()
    print(res[0])
    print(res[1])
    
main()
