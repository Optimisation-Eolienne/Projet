import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import plotly.graph_objects as go
from cylp.cy import CyClpSimplex
from cylp.py.modeling.CyLPModel import CyLPArray


#| Parametres

N_pays = 15
N_sites = 642
N_heures_par_annee = 24*365
N_annees = 1/12
N_heures = int(np.ceil(N_heures_par_annee*N_annees))

P_tot = 500000
kappa = 0.17
delta = 0.02
T = 3
N_periode = int(np.ceil(N_heures/T-1))


#| Chargement des donnees

sites = pd.read_csv("Sites.csv")
rendements_offshore = np.genfromtxt('Rendements_offshore.csv', delimiter=',')[:,:N_heures]
rendements_onshore = np.genfromtxt('Rendements_onshore.csv', delimiter=',')[:,:N_heures]

P_max = CyLPArray(sites["capacites"])

is_offshore = pd.Series(0,index=range(N_sites))
is_offshore[sites["capacite offshore"]=="Oui"] = 1
is_offshore = CyLPArray(is_offshore)

rendements = np.zeros((N_sites,N_heures))
for i in range(N_sites):
    if is_offshore[i]:
        rendements[i,:] = rendements_offshore[i,:]
    else:
        rendements[i,:] = rendements_onshore[i,:]


#| Resolution des problemes

def model_1():
    
    c = CyLPArray(np.zeros(N_sites))
    for i in range(N_sites):
        c[i] = np.sum(rendements[i,:])
    
    A =  np.matrix(np.zeros((N_periode,N_sites)))
    for i in range(N_periode):
        for j in range(N_sites):
            A[i,j] = np.sum(rendements[j,(i+1)*T:(i+2)*T])-np.sum(rendements[j,i*T:(i+1)*T])
    
    simplex = CyClpSimplex()
    
    #Variables
    P = simplex.addVariable('P',N_sites)
    y = simplex.addVariable('y',N_periode)
    
    #Contraintes
    simplex.addConstraint(0 <= P <= P_max,"Bornes sur les puissances installees")
    simplex.addConstraint(P.sum() == P_tot,"Contrainte P_tot")
    simplex.addConstraint(is_offshore * P == kappa * P_tot,"Contrainte offshore")
    
    simplex.addConstraint(y.sum() <= N_periode*delta*P_tot*T,"Contrainte variance 1")
    simplex.addConstraint(A * P - y <= 0,"Contrainte variance 2")
    simplex.addConstraint(-A * P - y <= 0,"Contrainte variance 3")  
    
    #Objectif        
    simplex.objective = -c * P
    
    #Solution
    simplex.primal()
    
    return simplex.primalVariableSolution['P']
    

def main():
    print(model_1())
    
main()
