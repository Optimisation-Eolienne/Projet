import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import plotly.graph_objects as go
from cylp.cy import CyClpSimplex
from cylp.py.modeling.CyLPModel import CyLPArray


#| Parametres

N_pays = 15
N_sites = 642
N_heures_par_annee = 24*365
N_annees = 1/12
N_heures = int(np.ceil(N_heures_par_annee*N_annees))

P_tot = 500000
kappa = 0.17
delta = 0.02
T = 3
N_periode_de_duree_T = int(np.ceil(N_heures/T-1))

#| Chargement des donnees

sites = pd.read_csv("Sites.csv")
rendements_offshore = np.genfromtxt('Rendements_offshore.csv', delimiter=',')[:,:N_heures]
rendements_onshore = np.genfromtxt('Rendements_onshore.csv', delimiter=',')[:,:N_heures]

P_max = CyLPArray(sites["capacites"])


#| Resolution des problemes

def model_1():
    
    is_offshore = pd.Series(0,index=range(N_sites))
    is_offshore[sites["capacite offshore"]=="Oui"] = 1
    is_offshore = CyLPArray(is_offshore)
    
    c = CyLPArray(np.zeros(N_sites,dtype=int))
    for i in range(N_sites):
        if is_offshore[i]:
            c[i] = np.sum(rendements_offshore[i])
        else:
            c[i] = np.sum(rendements_onshore[i])
    
    
    program = CyClpSimplex()
    
    #Variables
    P = program.addVariable('P',N_sites)
    
    #Contraintes
    program.addConstraint(0 <= P <= P_max,"Bornes sur les puissances installees")
    program.addConstraint(P.sum() == P_tot,"Contrainte P_tot")
    program.addConstraint(is_offshore * P == kappa * P_tot,"Contrainte offshore")
    
    #Objectif        
    program.objectiveCoefficients = -c
    
    #Solution
    program.primal()
    return program.primalVariableSolution['P']
    

def main():
    print(model_1())
    
main()
